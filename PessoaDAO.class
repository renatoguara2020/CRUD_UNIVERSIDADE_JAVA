

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import br.universidadejava.jpa.exemplo.modelo.Pessoa;

/**
 * Classe utilizada para fazer realizar as operações de banco de dados sobre a entity Pessoa.
 */
public class PessoaDAO {
  /**
   * Método utilizado para obter o entity manager.
   * @return
   */
  private EntityManager getEntityManager() {

    EntityManagerFactory emf = null;
    EntityManager manager = null;

    try {
      //Obtém o factory a partir da unidade de persistência.
      factory = Persistence.createEntityManagerFactory("ExemplosJPAPU");
      //Cria um entity manager.
      entityManager = emf.createEntityManager();
      //Fecha o factory para liberar os recursos utilizado.
    } finally {
      emf.close();
    }
    return entityManager;
  }

  /**
   * Método utilizado para salvar ou atualizar as informações de uma pessoa.
   * @param pessoa
   * @return
   * @throws java.lang.Exception
   */
  public Pessoa salvar(Pessoa pessoa) throws Exception {
    EntityManager manager = getEntityManager();
    try {
      // Inicia uma transação com o banco de dados.
      manager.getTransaction().begin();
      System.out.println("Salvando a pessoa.");
      // Verifica se a pessoa ainda não está salva no banco de dados.
      if(pessoa.getId() == null || pessoa.getId() == '') {
        //Salva os dados da pessoa.
        manager.persist(pessoa);
      } else {
        //Atualiza os dados da pessoa.
        pessoa = manager.merge(pessoa);
      }
      // Finaliza a transação.
      manager.getTransaction().commit();
    } finally {
      manager.close();
    }
    return pessoa;
  }

  /**
   * Método que apaga a pessoa do banco de dados.
   * @param id
   */
  public void excluir(Long id) {
    EntityManager manager = getEntityManager();
    try {
      // Inicia uma transação com o banco de dados.
      manager.getTransaction().begin();
      // Consulta a pessoa na base de dados através do seu ID.
      Pessoa pessoa = manager.find(Pessoa.class, id);
      System.out.println("Excluindo os dados de: " + pessoa.getNome());
      // Remove a pessoa da base de dados.
      manager.remove(pessoa);
      // Finaliza a transação.
      manager.getTransaction().commit();
    } finally {
      manager.close();
    }
  }

  /**
   * Consulta o pessoa pelo ID.
   * @param id
   * @return o objeto Pessoa.
   */
  public Pessoa consultarPorId(Long id) {
    EntityManager manager = getEntityManager();
    Pessoa pessoa = null;
    try {
      //Consulta uma pessoa pelo seu ID.
      pessoa = manager.find(Pessoa.class, id);
    } finally {
      manager.close();
    }
    return pessoa;
  }
}